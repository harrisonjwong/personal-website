{"version":3,"sources":["face.png","Face.js","Projects.js","Skills.js","Main.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Face","className","src","face","alt","React","Component","Projects","Skills","Main","exact","path","component","Header","props","state","headerTitle","isDrawerOpen","menuObjectList","location","icon","Home","onClick","setState","text","Description","Stars","menuList","List","map","obj","to","style","textDecoration","ListItem","button","ListItemIcon","ListItemText","primary","Drawer","open","this","onClose","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","App","document","title","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,8PCItBC,G,uLAGjB,OACE,yBAAKC,UAAU,QACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,UAAUG,IAAI,YACxC,kD,GAPwBC,IAAMC,YCFnBC,E,iLAGjB,OACE,yBAAKN,UAAU,eACb,+C,GAL8BI,IAAMC,WCAvBE,E,iLAGjB,OACE,yBAAKP,UAAU,eACb,6C,GAL4BI,IAAMC,WCIrBG,E,iLAEjB,OACE,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOW,KAAK,aAAaC,UAAWL,IACpC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAWJ,U,GAPVH,IAAMC,W,gHCWnBO,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAa,OACbC,cAAc,GAJC,E,sEAQT,IAAD,OACDC,EAAiB,CACrB,CACEC,SAAU,IACVC,KAAM,kBAACC,EAAA,EAAD,MACNC,QAAS,kBAAM,EAAKC,SAAS,CAAEP,YAAa,UAC5CQ,KAAM,QAER,CACEL,SAAU,aACVC,KAAM,kBAACK,EAAA,EAAD,MACNH,QAAS,kBAAM,EAAKC,SAAS,CAAEP,YAAa,cAC5CQ,KAAM,YAER,CACEL,SAAU,WACVC,KAAM,kBAACM,EAAA,EAAD,MACNJ,QAAS,kBAAM,EAAKC,SAAS,CAAEP,YAAa,YAC5CQ,KAAM,WAIJG,EACJ,yBAAK1B,UAAU,OACb,kBAAC2B,EAAA,EAAD,KACGV,EAAeW,KAAI,SAAAC,GAClB,OACE,kBAAC,IAAD,CAAMC,GAAID,EAAIX,SAAUa,MAAO,CAAEC,eAAgB,SAC/C,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACb,QAASQ,EAAIR,SAC5B,kBAACc,EAAA,EAAD,KAAeN,EAAIV,MACnB,kBAACiB,EAAA,EAAD,CAAcC,QAASR,EAAIN,cAQzC,OACE,yBAAKvB,UAAU,OACb,kBAACsC,EAAA,EAAD,CACEC,KAAMC,KAAK1B,MAAME,aACjByB,QAAS,kBAAM,EAAKnB,SAAS,CAAEN,cAAc,MAE5CU,GAEH,kBAACgB,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,MAAM,UACNC,aAAW,OACX3B,QAAS,kBAAM,EAAKC,SAAS,CAAEN,cAAc,MAE7C,kBAACiC,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAAMX,KAAK1B,MAAMC,oB,GAjEbX,IAAMC,WCI3B+C,E,4LAbXC,SAASC,MAAQ,kB,+BAIjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVUlD,IAAMC,WCOJkD,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEDP,SAASQ,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b53ef86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.fcc5ef26.png\";","import React from 'react';\nimport face from './face.png';\nimport './Face.css';\n\nexport default class Face extends React.Component {\n\n  render() {\n    return (\n      <div className=\"face\">\n        <header className=\"faceHeader\">\n          <img src={face} className=\"facePic\" alt=\"my face\"/>\n          <p>\n            Harrison Wong\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class Projects extends React.Component {\n\n  render() {\n    return(\n      <div className=\"appDefaults\">\n        <h1> Projects </h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class Skills extends React.Component {\n\n  render() {\n    return(\n      <div className=\"appDefaults\">\n        <h1> Skills </h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Face from \"./Face\";\nimport Projects from \"./Projects\";\nimport Skills from \"./Skills\";\n\nexport default class Main extends React.Component {\n  render() {\n    return (\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={Face} />\n          <Route path=\"/#projects\" component={Projects} />\n          <Route path=\"/#skills\" component={Skills} />\n        </Switch>\n      </main>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  IconButton,\n  Drawer,\n  List,\n  Divider,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport { Menu, Home, Description, Stars } from \"@material-ui/icons\";\n\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      headerTitle: \"Home\",\n      isDrawerOpen: false\n    };\n  }\n\n  render() {\n    const menuObjectList = [\n      {\n        location: \"/\",\n        icon: <Home />,\n        onClick: () => this.setState({ headerTitle: \"Home\" }),\n        text: \"Home\"\n      },\n      {\n        location: \"/#projects\",\n        icon: <Description />,\n        onClick: () => this.setState({ headerTitle: \"Projects\" }),\n        text: \"Projects\"\n      },\n      {\n        location: \"/#skills\",\n        icon: <Stars />,\n        onClick: () => this.setState({ headerTitle: \"Skills\" }),\n        text: \"Skills\"\n      }\n    ];\n\n    const menuList = (\n      <div className=\"lul\">\n        <List>\n          {menuObjectList.map(obj => {\n            return (\n              <Link to={obj.location} style={{ textDecoration: \"none\" }}>\n                <ListItem button onClick={obj.onClick}>\n                  <ListItemIcon>{obj.icon}</ListItemIcon>\n                  <ListItemText primary={obj.text} />\n                </ListItem>\n              </Link>\n            );\n          })}\n        </List>\n      </div>\n    );\n    return (\n      <div className=\"lul\">\n        <Drawer\n          open={this.state.isDrawerOpen}\n          onClose={() => this.setState({ isDrawerOpen: false })}\n        >\n          {menuList}\n        </Drawer>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n              onClick={() => this.setState({ isDrawerOpen: true })}\n            >\n              <Menu />\n            </IconButton>\n            <Typography variant=\"h6\">{this.state.headerTitle}</Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\n/*\n<header>\n  <nav>\n    <ul>\n      <li><Link to='/'>Home</Link></li>\n      <li><Link to='/projects'>Projects</Link></li>\n      <li><Link to='/skills'>Skills</Link></li>\n    </ul>\n  </nav>\n</header>\n*/\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\nimport Header from './Header';\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    document.title = \"Harrison Wong\";\n  }\n\n  render() {\n    return (\n      <div>\n        <Header/>\n        <Main/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}